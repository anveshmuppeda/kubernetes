AWSTemplateFormatVersion: 2010-09-09
Description: EKS Clsuter Secret Store CSI Driver Demo Project

# Parameters for VPC configuration, instance settings, and resource tagging
Parameters:
  Application:
    Description: Tag for the all resources
    Type: String
    Default: secretstore-demo-project

  VpcCIDR:
    Description: Please enter the IP range (CIDR notation) for this VPC
    Type: String
    Default: 10.0.0.0/16
  
  PublicSubnet1CIDR:
    Description: Please enter the IP range (CIDR notation) for the public subnet in the first Availability Zone
    Type: String
    Default: 10.0.0.0/18

  PublicSubnet2CIDR:
    Description: Please enter the IP range (CIDR notation) for the public subnet in the second Availability Zone
    Type: String
    Default: 10.0.64.0/18

  PrivateSubnet1CIDR:
    Description: Please enter the IP range (CIDR notation) for the private subnet in the first Availability Zone
    Type: String
    Default: 10.0.128.0/18

  PrivateSubnet2CIDR:
    Description: Please enter the IP range (CIDR notation) for the private subnet in the second Availability Zone
    Type: String
    Default: 10.0.192.0/18

  AmiID:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Description: "The ID of the AMI."
    Default: /aws/service/canonical/ubuntu/server/jammy/stable/current/amd64/hvm/ebs-gp2/ami-id

  KeyPairName:
    Type: String
    Description: The name of an existing Amazon EC2 key pair in this region to use to SSH into the Amazon EC2 instances.
    Default: us-east-1
  
  SecurityGroupSuffix:
    Type: String
    Description: Please enter the Security Group Suffix Name
    Default: sg

  EKSClusterName:
    Type: String
    Description: Name of k8s cluster
    Default: secretstore-demo-cluster
  
  DesiredSize:
    Type: Number
    Default: 4
    Description: Desired size of the node group
  MinSize:
    Type: Number
    Default: 2
    Description: Minimum size of the node group
  MaxSize:
    Type: Number
    Default: 6
    Description: Maximum size of the node group
  EKSVersion:
    Type: String
    Default: "1.30"
    Description: EKS version for the cluster
  Environment:
    Type: String
    Default: sandbox
    Description: Environment for the resources
    

Resources:
  #######################################################################################################
  #                                           VPC RESOURCES                                             #
  #######################################################################################################
  # VPC resource
  MyVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      Tags:
        - Key: Name
          Value: eks-secretstore-demo-vpc
        - Key: Application
          Value: !Ref Application
        - Key: Environment
          Value: !Ref Environment

  # Public subnet in the first availability zone
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: !Ref PublicSubnet1CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: Public-1A
        - Key: Application
          Value: !Ref Application
        - Key: Environment
          Value: !Ref Environment
        - Key: Criticality
          Value: low
        - Key: kubernetes.io/role/elb
          Value: 1

  # Public subnet in the second availability zone
  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      AvailabilityZone: !Select [ 1, !GetAZs  '' ]
      CidrBlock: !Ref PublicSubnet2CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: Public-2A
        - Key: Application
          Value: !Ref Application
        - Key: Environment
          Value: !Ref Environment
        - Key: kubernetes.io/role/elb
          Value: 1

  # Private subnet in the first availability zone
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      AvailabilityZone: !Select [ 0, !GetAZs  '' ]
      CidrBlock: !Ref PrivateSubnet1CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: Private-1A
        - Key: Application
          Value: !Ref Application
        - Key: Environment
          Value: !Ref Environment
        - Key: kubernetes.io/role/internal-elb
          Value: 1

  # Private subnet in the second availability zone
  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      AvailabilityZone: !Select [ 1, !GetAZs  '' ]
      CidrBlock: !Ref PrivateSubnet2CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: Private-2A
        - Key: Application
          Value: !Ref Application
        - Key: Environment
          Value: !Ref Environment
        - Key: kubernetes.io/role/internal-elb
          Value: 1
  
  # Internet Gateway resource
  MyIGW:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: EKS-secretstore-demo-IGW
        - Key: Application
          Value: !Ref Application
        - Key: Environment
          Value: !Ref Environment

  # Attach Internet Gateway to the VPC
  MyIGWAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref MyIGW
      VpcId: !Ref MyVPC

  # Public Route Table
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MyVPC
      Tags:
        - Key: Name
          Value: Public_RT
        - Key: Application
          Value: !Ref Application
        - Key: Environment
          Value: !Ref Environment
  
  # Route in Public Route Table to allow internet traffic
  MainRouteTableIGWAttachement:
    Type: AWS::EC2::Route
    DependsOn: MyIGWAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref MyIGW
  
  # Private Route Table
  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MyVPC
      Tags:
        - Key: Name
          Value: Private_RT
        - Key: Application
          Value: !Ref Application
        - Key: Environment
          Value: !Ref Environment

  # Associate Private Subnet 1 with Private Route Table
  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnet1
  
  # Associate Private Subnet 2 with Private Route Table
  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnet2
  
  # Elastic IP for NAT Gateway
  NatGatewayEIP:
    Type: AWS::EC2::EIP
    DependsOn: MyIGWAttachment
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: MyEIP
        - Key: Application
          Value: !Ref Application
        - Key: Environment
          Value: !Ref Environment

  # NAT Gateway in Public Subnet 1
  MyNatGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGatewayEIP.AllocationId
      SubnetId: !Ref PublicSubnet1
  
  # Route in Private Route Table to route traffic through NAT Gateway
  PrivateRouteAssociateNAT:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref MyNatGateway
  
  # Public Network ACL
  MyPublicNACL:
    Type: AWS::EC2::NetworkAcl
    Properties:
       VpcId: !Ref MyVPC
       Tags:
       - Key: Name
         Value: Public-Nacl
  publicInboundRule:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
       NetworkAclId:
         Ref: MyPublicNACL
       RuleNumber: 100
       Protocol: 6
       RuleAction: allow
       CidrBlock: 0.0.0.0/0
       PortRange:
         From: 22
         To: 22
  publicInboundRule2:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
       NetworkAclId:
         Ref: MyPublicNACL
       RuleNumber: 99
       Protocol: -1
       RuleAction: allow
       CidrBlock: 0.0.0.0/0
  OutboundRule:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
       NetworkAclId:
         Ref: MyPublicNACL
       RuleNumber: 100
       Protocol: -1
       Egress: true
       RuleAction: allow
       CidrBlock: 0.0.0.0/0
  publicSubnet1NetworkAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
       SubnetId:
         Ref: PublicSubnet1
       NetworkAclId:
         Ref: MyPublicNACL
  publicSubnet2NetworkAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
       SubnetId:
         Ref: PublicSubnet2
       NetworkAclId:
         Ref: MyPublicNACL
  
  # Private Network ACL
  MyPrivateNACL:
    Type: AWS::EC2::NetworkAcl
    Properties:
       VpcId: !Ref MyVPC
       Tags:
       - Key: Name
         Value: Private-Nacl
  privateInboundRule:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
       NetworkAclId:
         Ref: MyPrivateNACL
       RuleNumber: 100
       Protocol: 6
       RuleAction: allow
       CidrBlock: 10.0.1.0/24
       PortRange:
         From: 22
         To: 22
  privateInboundHTTPNACL:
    Type: "AWS::EC2::NetworkAclEntry"
    Properties:
      NetworkAclId: 
        Ref: MyPrivateNACL
      RuleNumber: 99
      Protocol: "6"
      RuleAction: "allow"
      Egress: "false"
      CidrBlock: "0.0.0.0/0"
      PortRange:
        From: '80'
        To: '80'
  privateInboundHTTPSNACL:
    Type: "AWS::EC2::NetworkAclEntry"
    Properties:
      NetworkAclId:
        Ref: MyPrivateNACL
      RuleNumber: 98
      Protocol: "6"
      RuleAction: "allow"
      Egress: "false"
      CidrBlock: "0.0.0.0/0"
      PortRange:
        From: '443'
        To: '443'
  privateInboundRulePublic:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
       NetworkAclId:
         Ref: MyPrivateNACL
       RuleNumber: 97
       Protocol: -1
       RuleAction: allow
       CidrBlock: 0.0.0.0/0
  privateOutboundRule:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
       NetworkAclId:
         Ref: MyPrivateNACL
       RuleNumber: 100
       Protocol: -1
       Egress: true
       RuleAction: allow
       CidrBlock: 0.0.0.0/0
  privateSubnet1NetworkAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
       SubnetId:
         Ref: PrivateSubnet1
       NetworkAclId:
         Ref: MyPrivateNACL
  privateSubnet2NetworkAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
       SubnetId:
         Ref: PrivateSubnet2
       NetworkAclId:
         Ref: MyPrivateNACL

  # Security Group for public instances
  PublicSercuritGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Join ["-", [public, !Ref SecurityGroupSuffix]]
      GroupDescription: "Allow HTTP/HTTPS and SSH inbound and outbound traffic"
      VpcId: !Ref MyVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: eks-secretstore-demo-public-sg
        - Key: Application
          Value: !Ref Application
        - Key: Environment
          Value: !Ref Environment

  # Security Group for private instances
  PrivateSercuritGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Join ["-", [private, !Ref SecurityGroupSuffix]]
      GroupDescription: "Allow HTTP/HTTPS and SSH inbound and outbound traffic"
      VpcId: !Ref MyVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: eks-secretstore-demo-private-sg
        - Key: Application
          Value: !Ref Application
        - Key: Environment
          Value: !Ref Environment

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1
  
  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2
  
  #######################################################################################################
  #                                           EKS CLUSTER Control Plane                                 #
  #######################################################################################################
  # Control plane
  ControlPlane:
    Type: AWS::EKS::Cluster
    Properties:
      Name: !Ref EKSClusterName
      Version: !Ref EKSVersion
      RoleArn: !GetAtt ControlPlaneRole.Arn
      ResourcesVpcConfig:
        SecurityGroupIds:
          - !Ref ControlPlaneSecurityGroup
        SubnetIds:
          - !Ref PublicSubnet1
          - !Ref PublicSubnet2 
      Logging:
        ClusterLogging:
          EnabledTypes:
            - Type: api
            - Type: audit
      Tags:
        - Key: Criticality
          Value: low
        - Key: Environment
          Value: !Ref Environment
        - Key: Application
          Value: !Ref Application
  # Control plane role
  ControlPlaneRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "ControlPlaneRole-CF-${AWS::StackName}"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
            Effect: Allow
            Principal:
              Service:
                - eks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns: 
        - arn:aws:iam::aws:policy/AmazonEKSClusterPolicy
        - arn:aws:iam::aws:policy/AmazonEKSServicePolicy

  # Control plane security group
  ControlPlaneSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for the elastic network interfaces between the control plane and the worker nodes
      VpcId: !Ref MyVPC
      Tags:
        - Key: cfstack
          Value: !Sub "${AWS::StackName}-ControlPlaneSecurityGroup"
  
  #######################################################################################################
  #                                           Node Groups                                               #
  #######################################################################################################
  NodeGroup:
    Type: AWS::EKS::Nodegroup
    Properties:
      ClusterName: !Ref ControlPlane
      NodegroupName: NodeGroup1
      NodeRole: !GetAtt NodeInstanceRole.Arn
      Subnets:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      ScalingConfig:
        DesiredSize: !Ref DesiredSize
        MinSize: !Ref MinSize
        MaxSize: !Ref MaxSize
      InstanceTypes:
        - t3.medium
      Version: !Ref EKSVersion
      Tags:
        Criticality: low
        Environment: !Ref Environment
        Application: !Ref Application
  
  NodeGroup2:
    Type: AWS::EKS::Nodegroup
    Properties:
      ClusterName: !Ref ControlPlane
      NodegroupName: NodeGroup2
      NodeRole: !GetAtt NodeInstanceRole.Arn
      Subnets:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      ScalingConfig:
        DesiredSize: !Ref DesiredSize
        MinSize: !Ref MinSize
        MaxSize: !Ref MaxSize
      InstanceTypes:
        - m5.large
      Version: !Ref EKSVersion
      Tags:
        Criticality: low
        Environment: !Ref Environment
        Application: !Ref Application

  NodeInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "ManagedNodeGroup-CF-${AWS::StackName}"
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy
        - arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
      Tags:
        - Key: Criticality
          Value: low
        - Key: Environment
          Value: !Ref Environment
        - Key: Application
          Value: !Ref Application
  
  # Installing Required EKS Addons
  MyEksAddonVpcCni:
    Type: AWS::EKS::Addon
    DependsOn: ControlPlane
    Properties:
      AddonName: vpc-cni
      AddonVersion: v1.19.2-eksbuild.5
      ClusterName: !Ref EKSClusterName
      ConfigurationValues: |
        {
          "env": {
            "ENABLE_PREFIX_DELEGATION": "true"
          }
        }
  MyEksAddonCoreDns:
    Type: AWS::EKS::Addon
    DependsOn: MyEksAddonVpcCni
    Properties:
      AddonName: coredns
      AddonVersion: v1.11.4-eksbuild.2
      ClusterName: !Ref EKSClusterName
      ResolveConflicts: OVERWRITE
  MyEksAddonKubeProxy:
    Type: AWS::EKS::Addon
    DependsOn: ControlPlane
    Properties:
      AddonName: kube-proxy
      AddonVersion: v1.28.15-eksbuild.9
      ClusterName: !Ref EKSClusterName
  MyEksAddonEksPodIdentityAgent:
    Type: AWS::EKS::Addon
    DependsOn: ControlPlane
    Properties:
      AddonName: eks-pod-identity-agent
      AddonVersion: v1.3.4-eksbuild.1
      ClusterName: !Ref EKSClusterName
  
  # Create IAM OIDC Provider for EKS Cluster
  EKSOpenIDConnectProvider:
    Type: AWS::IAM::OIDCProvider
    DependsOn: ControlPlane
    Properties:
      Url: !GetAtt ControlPlane.OpenIdConnectIssuerUrl
      ClientIdList:
        - sts.amazonaws.com

  #########################################################################################################
  #                                           Secrets Store CSI Driver                                  #
  #########################################################################################################
  # IAM Role for secrets-store-csi-driver-provider-aws
  SecretStoreCsiDriverRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "EKS_Secret_Store_CSI_DriverRole-${AWS::StackName}"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
            Effect: Allow
            Principal:
              Service:
                - pods.eks.amazonaws.com
            Action: 
              - sts:AssumeRole
              - sts:TagSession
      ManagedPolicyArns: 
        - arn:aws:iam::aws:policy/service-role/AmazonEFSCSIDriverPolicy
      Policies:
        - PolicyName: !Sub '${EKSClusterName}-Secret-Store-CSI-DriverPolicy'
          PolicyDocument:
            Version: 2012-10-17
            Statement:
                - Effect: Allow
                  Action:
                  - secretsmanager:GetSecretValue
                  - secretsmanager:DescribeSecret
                  Resource: "arn:*:secretsmanager:*:*:secret:*"
      Tags:
        - Key: Criticality
          Value: low
        - Key: Environment
          Value: !Ref Environment
        - Key: Application
          Value: !Ref Application
  
  # EKS Pod Identity Association for secrets-store-csi-driver-provider-aws
  SecretStorePodIdentityAssociation:
    DependsOn: SecretStoreCsiDriverRole
    Type: AWS::EKS::PodIdentityAssociation
    Properties:
      ServiceAccount: secretstore-demo-sa # Replace with your service account name
      ClusterName: !Ref EKSClusterName
      RoleArn: !GetAtt SecretStoreCsiDriverRole.Arn
      Namespace: default # Replace with your namespace if different